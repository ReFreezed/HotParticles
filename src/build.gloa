--[[============================================================
--=
--=  Build script
--=
--=  $ gloa --root . src/build.gloa
--=  $ gloa --root . src/build.gloa dev
--=  $ gloa --root . src/build.gloa release [private]
--=
--=-------------------------------------------------------------
--=
--=  Hot Particles - a particle editor for LÖVE
--=  by Marcus 'ReFreezed' Thunström
--=
--============================================================]]

global !import "basic"
global !import "string"
!import "compiler"
!import "unicode"
!import "utils"

export io  :: !import "io"
local  lfs :: !import "lfs"
local  os  :: !import "os"

global !self
!load "src/shared"

!run {
	local options      = getBuildOptions()
	options.outputType = .NONE
	setBuildOptions(options)

	-- [[
	if not indexOf(getProgramArguments(), "dev")  print("Compiling...")
	compile("src/main.gloa")
	compile("src/conf.gloa")
	--]]

	if indexOf(getProgramArguments(), "release")  doRelease()
}

local Values :: struct { !key:string, !value:string }

local params: Params = NULL

local doRelease :: () {
	print("Doing release stuff...")

	params = loadParams()

	local outputDirWin64     = "output/win64/Hot Particles"
	local outputDirMacOs     = "output/macOs/Hot Particles"
	local outputDirUniversal = "output/universal/Hot Particles"

	local values: Values = NULL
	do {
		local version, versionMajor, versionMinor, versionPatch = getReleaseVersion()

		values = {
			exeName         = "HotParticles",
			exePath         = outputDirWin64.."/HotParticles.exe",
			iconPath        = "temp/appIcon.ico",

			appName         = "Hot Particles",
			appNameShort    = "Hot Particles", -- Should be less than 16 characters long.
			appNameInternal = "Hot Particles",

			appVersion      = version,
			appVersionMajor = versionMajor,
			appVersionMinor = versionMinor,
			appVersionPatch = versionPatch,
			appIdentifier   = "com.refreezed.hotparticles",

			companyName     = "",
			copyright       = os.getDate"Copyright 2020-%Y Marcus 'ReFreezed' Thunström",

			lovePath        = "temp/app.love",
			loveExeDir      = params.dirLoveWin64,
			loveExePath     = params.dirLoveWin64.."/love.exe",
			loveAppDir      = params.dirLoveMacOs,
			loveAppPath     = params.dirLoveMacOs.."/love.app",
			versionInfoPath = "temp/appInfo.res",
		}
	}

	lfs.makeDirectory("temp")

	do {
		-- Create missing icon sizes.
		for {--[[16,]]24,32,48,64,128--[[,256]]} {
			executeRequired(params.pathMagick, {
				"gfx/appIcon256.png",
				"-resize", format("%dx%d", it, it),
				format("gfx/appIcon%d.png", it),
			})
		}

		-- Crush icon PNGs.
		-- @Incomplete: Crush all PNGs for release version!
		for {16,24,32,48,64,128,256} {
			executeRequired(params.pathPngCrush, {
				"-ow",          -- Overwrite (must be first).
				"-rem", "alla", -- Remove unnecessary chunks.
				"-reduce",      -- Lossless color reduction.
				"-warn",        -- No spam!
				format("gfx/appIcon%d.png", it),
			})
		}

		-- Create .ico.
		writeFile("temp/icons.txt", "\z
			gfx/appIcon16.png\n\z
			gfx/appIcon24.png\n\z
			gfx/appIcon32.png\n\z
			gfx/appIcon48.png\n\z
			gfx/appIcon64.png\n\z
			gfx/appIcon128.png\n\z
			gfx/appIcon256.png\n\z
		")

		executeRequired(params.pathMagick, {
			"@temp/icons.txt",
			values.iconPath,
		})
	}

	-- Make love. <3
	local filesToLove = {
		"conf.lua",
		"main.lua",
	}

	for dir: {"gfx","src"} {
		lfs.traverseDirectory(dir, [filesToLove] (path:string) -> lfs.Traverse {
			if lfs.isFile(path) {
				local DO_PRINT :: 1==0
				local _, ext = matchPattern(path, "[^.]+$")

				if ext == "psd" or ext == "gloa" {
					!if DO_PRINT  print("- "..path)
				} else {
					!if DO_PRINT  print("+ "..path)
					insert(filesToLove, path)
				}

			-- } elseif path == ? {
			-- 	return .IGNORE
			}

			return .CONTINUE
		})
	}

	io.remove(values.lovePath)
	zip(values.lovePath, filesToLove)

	-- Windows.
	local PATH_RC_LOG :: "local/robocopy.log"
	io.remove(PATH_RC_LOG)

	do {
		local outputDir = outputDirWin64

		-- Compile resource file.
		do {
			local contents = readFile("misc/appInfoTemplate.rc") -- UTF-16 LE BOM encoded.
			contents       = templateToStringUtf16(contents, values)
			writeFile("temp/appInfo.rc", contents)

			executeRequired(params.pathRh, {
				"-open",   "temp/appInfo.rc",
				"-save",   values.versionInfoPath,
				"-action", "compile",
				"-log",    "local/rh.log", -- @Temp
				-- "-log",    "CONSOLE", -- Why doesn't this work? (And is it just in Sublime?)
			})
		}

		do {
			local TEMPLATE_UPDATE_EXE :: '\z
				[FILENAMES]\n\z
				Exe    = "${loveExePath}"\n\z
				SaveAs = "${exePath}"\n\z
				Log    = CONSOLE\n\z

				[COMMANDS]\n\z
				-delete ICONGROUP,,\n\z
				-delete VERSIONINFO,,\n\z
				-add "${versionInfoPath}", ,,\n\z
				-add "${iconPath}", ICONGROUP,MAINICON,0\n\z
			'

			local contents = templateToString(TEMPLATE_UPDATE_EXE, values, toWindowsPath)
			writeFile("temp/updateExe.rhs", contents)
		}

		-- Create base for install directory using robocopy.
		-- Note: Because of robocopy's complex return codes we just trust that it's always successful.
		-- https://blogs.technet.microsoft.com/deploymentguys/2008/06/16/robocopy-exit-codes/
		os.execute("ROBOCOPY", {values.loveExeDir, outputDir, "/NOCOPY", "/PURGE", "/E", "/LOG+:"..PATH_RC_LOG})
		os.execute("ROBOCOPY", {values.loveExeDir, outputDir, "*.dll",             "/E", "/LOG+:"..PATH_RC_LOG})

		-- Create exe.
		do {
			executeRequired(params.pathRh, {
				"-script", "temp/updateExe.rhs",
			})

			local contentsLoveExe = readFile(values.exePath)
			local contentsLove    = readFile(values.lovePath)

			local ok, file, err = io.openForWriting(values.exePath) ; assert(ok, err)
			io.write(file, contentsLoveExe)
			io.write(file, contentsLove)
			io.close(file)
		}

		-- Add remaining files.
		do {
			copyFilesInDirectory("exportTemplates", outputDir.."/exportTemplates", "%.lua$")
			copyFile("misc/Changelog.txt", outputDir.."/_CHANGELOG.txt")
			copyFile("misc/README.txt",    outputDir.."/_README.txt")
		}
	}

	if indexOf(getProgramArguments(), "private")  return

	-- macOS.
	do {
		local outputDir   = outputDirMacOs
		local contentsDir = format("%s/%s.app/Contents", outputDir, values.exeName)

		-- Create base for install directory using robocopy.
		lfs.makeDirectoryRecursive(contentsDir)
		lfs.makeDirectory(contentsDir.."/Frameworks")
		lfs.makeDirectory(contentsDir.."/MacOS")
		lfs.makeDirectory(contentsDir.."/Resources")

		os.execute("ROBOCOPY", {values.loveAppPath.."/Contents", contentsDir, "/NOCOPY", "/PURGE", "/E", "/LOG+:"..PATH_RC_LOG})
		removeDirectory(contentsDir.."/_CodeSignature")

		os.execute("ROBOCOPY", {values.loveAppPath.."/Contents/Frameworks", contentsDir.."/Frameworks", "/E", "/LOG+:"..PATH_RC_LOG})
		os.execute("ROBOCOPY", {values.loveAppPath.."/Contents/MacOS",      contentsDir.."/MacOS",      "/E", "/LOG+:"..PATH_RC_LOG})

		-- Create .icns.
		local ok, err = !import"macos/icns".create("temp/appIcon.icns", {
			{path="gfx/appIcon16.png",  size=16},
			{path="gfx/appIcon32.png",  size=32},
			{path="gfx/appIcon64.png",  size=64},
			{path="gfx/appIcon128.png", size=128},
			{path="gfx/appIcon256.png", size=256},
		})
		if not ok  error(err)

		-- Create other files.
		local infoPlist = readFile("misc/appInfoTemplate.plist")

		infoPlist = replacePattern(infoPlist, "<!%-%-.-%-%->", "")  -- Remove comments.
		infoPlist = replacePattern(infoPlist, ">%s+",          ">") -- Remove useless whitespace.
		infoPlist = replacePattern(infoPlist, "%s+<",          "<") -- Remove useless whitespace.

		infoPlist = templateToString(infoPlist, values, (s:string) -> string {
			return (replacePattern(s, '[&<>"]', table.{
				["&"] = "&amp;",
				["<"] = "&lt;",
				[">"] = "&gt;",
				['"'] = "&quot;",
			}))
		})

		writeFile(contentsDir.."/Info.plist", infoPlist)
		writeFile(contentsDir.."/PkgInfo",    "APPL????")

		-- Add remaining files.
		do {
			copyFilesInDirectory("exportTemplates", contentsDir.."/Resources/exportTemplates", "%.lua$")
			copyFile(values.lovePath,      contentsDir.."/Resources/Game.love")
			copyFile("temp/appIcon.icns",  contentsDir.."/Resources/AppIcon.icns")
			copyFile("misc/Changelog.txt", outputDir.."/_CHANGELOG.txt")
			copyFile("misc/README.txt",    outputDir.."/_README.txt")
		}
	}

	-- Universal.
	do {
		local outputDir = outputDirUniversal

		removeDirectory(outputDir)
		lfs.makeDirectory(outputDir)

		copyFilesInDirectory("exportTemplates", outputDir.."/exportTemplates", "%.lua$")
		copyFile(values.lovePath,               format("%s/%s.love",                 outputDir, values.exeName))
		copyFile("misc/Changelog.txt",          format("%s/_CHANGELOG.txt",          outputDir))
		copyFile("misc/README.txt",             format("%s/_README.txt",             outputDir))
		copyFile("misc/README (universal).txt", format("%s/_README (universal).txt", outputDir))
	}

	-- Zip for distribution!
	zip("output/HotParticles_"..values.appVersion.."_win64.zip",     "./"..outputDirWin64)
	zip("output/HotParticles_"..values.appVersion.."_macos.zip",     "./"..outputDirMacOs)
	zip("output/HotParticles_"..values.appVersion.."_universal.zip", "./"..outputDirUniversal)

	print("Release stuff done!")
	-- os.exit(1) -- DEBUG
}

local executeRequired :: (command:string) {
	assert((os.execute(command) == 0), command)
}
local executeRequired :: (program:string, arguments:[]string) {
	local ok, err, code, cmd = os.execute(program, arguments)
	assert(ok, cmd)
	if code ~= 0  errorf("%d / %s", code, cmd)
}

local templateToString :: (s:string, values:Values, formatter:(s:string)->string=NULL) -> string {
	return (replacePatternWithFunction(s, "${([%w]+)}", [values, formatter] (k:string) -> string|none {
		local v = values[k]
		if v         == NULL  errorf("No value '%s'.", k)
		if formatter ~= NULL  v = formatter(v)
		return v
	}))
}
local templateToStringUtf16 :: (s:string, values:Values, formatter:(s:string)->string=NULL) -> string {
	return (replacePatternWithFunction(s, "$%z{%z([%w%z]+)}%z", [values, formatter] (k:string) -> string|none {
		k       = utf16ToUtf8(k)
		local v = values[k]
		if v         == NULL  errorf("No value '%s'.", k)
		if formatter ~= NULL  v = formatter(v)
		return utf8ToUtf16(v)
	}))
}

local utf16ToUtf8 :: (s:string) -> string {
	local ok, cps = utf16DecodeLe(s) ; assert(ok)
	ok,       s   = utf8Encode(cps)  ; assert(ok)
	return s
}
local utf8ToUtf16 :: (s:string) -> string {
	local ok, cps = utf8Decode(s)      ; assert(ok)
	ok,       s   = utf16EncodeLe(cps) ; assert(ok)
	return s
}

local toWindowsPath :: (s:string) -> string {
	return (replace(s, "/", "\\"))
}

-- Note: CWD matter!
-- Note: To strip the path to folderToZip inside the resulting zip file, prepend "./".
local zip :: (zipFilePath:string, folderToZip:string, append=false) {
	if not append and lfs.isFile(zipFilePath) {
		local ok, err = io.remove(zipFilePath)
		assert(ok, err)
	}
	executeRequired(params.path7z, {"a", "-tzip", zipFilePath, folderToZip})
}
local zip :: (zipFilePath:string, pathsToZip:[]string, append=false) {
	if not append and lfs.isFile(zipFilePath) {
		local ok, err = io.remove(zipFilePath)
		assert(ok, err)
	}

	local PATH_INCLUDE_LIST :: "temp/zipIncludes.txt"

	local ok, err = io.writeEntireTextFile(PATH_INCLUDE_LIST, pathsToZip, dataSuffix="\n")
	assert(ok, err)

	executeRequired(params.path7z, {"a", "-tzip", zipFilePath, "@"..PATH_INCLUDE_LIST})
}

local readFile :: (path:string) -> string {
	local ok, contents, err = io.readEntireFile(path)
	assert(ok, err)
	return contents
}
local writeFile :: (path:string, contents:string) {
	local ok, err = io.writeEntireFile(path, contents)
	assert(ok, err)
}

local copyFile :: (from:string, to:string) {
	local ok, err = io.copy(from, to)
	assert(ok, err)
}
local copyFilesInDirectory :: (from:string, to:string, pattern:string) {
	lfs.makeDirectoryRecursive(to)

	for name in lfs.directory(from)  if findPattern(name, pattern) {
		local path = from.."/"..name

		if lfs.isFile(path) {
			local ok, err = io.copy(path, to.."/"..name)
			assert(ok, err)
		}
	}
}

local removeDirectory :: (dirPath:string) {
	if lfs.isDirectory(dirPath)  executeRequired("RMDIR", {"/S", "/Q", dirPath})
}
