--[[============================================================
--=
--=  Shared between program and build system
--=
--=-------------------------------------------------------------
--=
--=  Hot Particles - a particle editor for LÖVE
--=  by Marcus 'ReFreezed' Thunström
--=
--============================================================]]

export Params :: struct {
	dirLoveWin64: string,
	dirLoveMacOs: string,
	path7z: string,
	pathMagick: string,
	pathPngCrush: string,
	pathRh: string,
}

export loadParams :: () -> Params {
	local params: Params

	for line in io.eachLine"local/params.ini"  if line and not findPattern(line, "^#") {
		local ok, k, v = matchPattern(line, "^([%w_]+)%s*=%s*(.*)$")
		assert(ok, line)

		if cast(string) k == {
			case "dirLoveWin64": params.dirLoveWin64 = cast(string) v
			case "dirLoveMacOs": params.dirLoveMacOs = cast(string) v
			case "path7z":       params.path7z       = cast(string) v
			case "pathMagick":   params.pathMagick   = cast(string) v
			case "pathPngCrush": params.pathPngCrush = cast(string) v
			case "pathRh":       params.pathRh       = cast(string) v
			case:                printf("Error @ params.ini: '%s'", cast(string) k)
		}
	}

	assert(params.dirLoveWin64 ~= "", "dirLoveWin64")
	assert(params.dirLoveMacOs ~= "", "dirLoveMacOs")
	assert(params.path7z       ~= "", "path7z")
	assert(params.pathMagick   ~= "", "pathMagick")
	assert(params.pathPngCrush ~= "", "pathPngCrush")
	assert(params.pathRh       ~= "", "pathRh")

	return params
}

export getReleaseVersion :: () -> (version:string, versionMajor,versionMinor,versionPatch:string) {
	local ok, version, err = io.readEntireFile("misc/version.txt")
	assert(ok, err)

	local ^ok, versionMajor, versionMinor, versionPatch = matchPattern(cast(string)version, "^(%d+)%.(%d+)%.(%d+)$")
	assert(ok, cast(string)version)

	return cast(string)version, cast(string)versionMajor, cast(string)versionMinor, cast(string)versionPatch
}
